// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  FAILED
}

enum QuestionType {
  CHOICE
  WRITTEN
}

model User {
  id             Int           @id @default(autoincrement())
  email          String        @unique
  hashedPassword String
  firstName      String
  lastName       String
  phoneNumber    String
  schoolName     String?
  studyLine      String?
  gradeLevel     String?
  role           String
  profileImg     String?
  parentName     String?
  parentEmail    String?
  parentPhone    String?
  point          Int           @default(0)
  enrollments    Enrollment[]
  cart           Cart?
  payments       Payment[]
  userExercises  UserExercise[]
  orders         Order[]
}

model Course {
  id           Int           @id @default(autoincrement())
  courseNumber String
  courseName   String
  description  String
  category     String?
  teacher      String?
  level        String?
  price        Float
  courseImg    String?
  stripePriceId String?
  lessons      Lesson[]
  enrollments  Enrollment[]
  cartItems    CartItem[]
  orderItems   OrderItem[]
  documents    Document[]
}

model Enrollment {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   Int
  date       DateTime @default(now())
}

model Cart {
  id       Int        @id @default(autoincrement())
  user     User       @relation(fields: [userId], references: [id])
  userId   Int        @unique
  items    CartItem[]
}

model CartItem {
  id       Int     @id @default(autoincrement())
  cart     Cart    @relation(fields: [cartId], references: [id])
  cartId   Int
  course   Course  @relation(fields: [courseId], references: [id])
  courseId Int
  quantity Int     @default(1)
  @@unique([cartId, courseId])
}

model Order {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  orderDate   DateTime    @default(now())
  orderNumber String      @unique
  totalPrice  Float
  status      OrderStatus @default(PENDING)
  payments    Payment[]   
  items       OrderItem[]
  stripeSessionId String?   @unique
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade) // เชื่อมกับ Order ถ้าลบ Order ให้ลบ Item ด้วย
  orderId   Int
  course    Course  @relation(fields: [courseId], references: [id]) // เชื่อมกับ Course ที่ซื้อ
  courseId  Int
  quantity  Int     @default(1) // จำนวน (ปกติคอร์สออนไลน์เป็น 1)
  price     Float   
  @@unique([orderId, courseId])
}

model Payment {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  order        Order    @relation(fields: [orderId], references: [id])
  orderId      Int
  totalAmount  Float
  status       String
  paymentDate  DateTime @default(now())
  stripePaymentIntentId String?  @unique
}

model Lesson {
  id           Int      @id @default(autoincrement())
  course       Course   @relation(fields: [courseId], references: [id])
  courseId     Int
  title        String
  lessonNumber Int
  videos       Video[]
}

model Video {
  id        Int     @id @default(autoincrement())
  lesson   Lesson @relation(fields: [lessonId], references: [id])
  lessonId Int
  title     String
  url       String
}

model Document {
  id        Int     @id @default(autoincrement())
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  Int
  title     String
  fileUrl   String
  fileSize  Int
}

model Exercise {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  level       String
  questions   Question[]
  userResults UserExercise[]
}

model Question {
  id            Int          @id @default(autoincrement())
  exercise      Exercise     @relation(fields: [exerciseId], references: [id])
  exerciseId    Int
  type          QuestionType
  questionText  String
  choiceA       String?
  choiceB       String?
  choiceC       String?
  choiceD       String?
  correctAnswer String?
  sampleAnswer  String?
}

model UserExercise {
  id             Int       @id @default(autoincrement())
  user           User      @relation(fields: [userId], references: [id])
  userId         Int
  exercise       Exercise  @relation(fields: [exerciseId], references: [id])
  exerciseId     Int
  completionDate DateTime
  pointsAwarded  Int
}

model Achievement {
  id        Int    @id @default(autoincrement())
  image     String
}

model Article {
  id           Int      @id @default(autoincrement())
  category     Category @relation(fields: [categoryId], references: [id])
  categoryId   Int
  title        String
  description  String @db.Text
  coverImage   String?
  publishedAt  DateTime @default(now())
  images       ArticleImage[]
}

model ArticleImage {
  id        Int      @id @default(autoincrement())
  url       String   
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  order     Int?     
  altText   String?  
}

model Category {
  id           Int       @id @default(autoincrement())
  name         String
  articles     Article[]
}
