"use client";
import { useState, useEffect, useMemo } from "react"; // ‡πÄ‡∏û‡∏¥‡πà‡∏° useEffect, useMemo
import styles from "./course.module.css"; // <-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Path CSS Module
import Image, { StaticImageData } from "next/image";
import defaultCourseImage from "../../img/recom-course.png"; // <-- ‡∏£‡∏π‡∏õ Default
import Link from "next/link";
// --- Type ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Course ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API (‡∏Ñ‡∏ß‡∏£ Import ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á) ---
type CourseFromAPI = {
  id: number; // <-- ID ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
  courseNumber: string;
  courseName: string;
  description: string;
  category: string | null;
  teacher: string | null;
  level: string | null;
  price: number;
  courseImg?: string | null;
  stripePriceId?: string | null;
};

// --- CourseCard Component (‡∏Ñ‡∏ß‡∏£ Import ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô) ---
// ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Home ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö Prop ‡πÄ‡∏õ‡πá‡∏ô CourseFromAPI
function CourseCard({ course }: { course: CourseFromAPI }) {
  const imageUrl = course.courseImg || defaultCourseImage.src;
  const [isAddingToCart, setIsAddingToCart] = useState(false);

  // --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ---
  const handleAddToCart = async (courseId: number) => {
    setIsAddingToCart(true);
    try {
      console.log(`Adding course ${courseId} to cart...`);
      const res = await fetch("/api/cart/items", {
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          courseId: courseId,
          quantity: 1, // ‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡∏•‡∏∞ 1
        }),
      });

      const data = await res.json();

      if (!res.ok) {
        throw new Error(
          data.error || `Failed to add to cart (status: ${res.status})`
        );
      }

      console.log("Add to cart response:", data);
      alert(`‡πÄ‡∏û‡∏¥‡πà‡∏° "${course.courseName}" ‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
      // TODO: (Optional) ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏ä‡πà‡∏ô ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ö‡∏ô Navbar
      // ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤ API ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Cart ‡∏°‡∏≤ ‡∏Å‡πá‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï State ‡∏Ç‡∏≠‡∏á Cart ‡πÉ‡∏ô Context/Global State
    } catch (err) {
      console.error("Error adding to cart:", err);
      alert(
        `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤: ${err instanceof Error ? err.message : "Unknown error"
        }`
      );
    } finally {
      setIsAddingToCart(false);
    }
  };
  // --- ‡∏à‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ---

  return (
    <div className={styles.courseCard}>
      {" "}
      {/* ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ style ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô course.module.css */}
      <div className={styles.imageWrapper}>
        {" "}
        {/* ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö style ‡∏ô‡∏µ‡πâ */}
        <Image
          src={imageUrl}
          alt={course.courseName}
          width={180}
          height={240} // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ fill ‡∏ñ‡πâ‡∏≤ container ‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î
          style={{ objectFit: "cover" }}
          onError={(e) => {
            (e.target as HTMLImageElement).src = defaultCourseImage.src;
          }}
        />
      </div>
      <p className={styles.price}>{course.price.toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>{" "}
      {/* ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö style ‡∏ô‡∏µ‡πâ */}
      <p className={styles.courseTitle}>{course.courseName}</p>{" "}
      {/* ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö style ‡∏ô‡∏µ‡πâ */}
      <p className={styles.code}>‡∏£‡∏´‡∏±‡∏™ {course.courseNumber}</p>{" "}
      {/* ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö style ‡∏ô‡∏µ‡πâ */}
      <div className={styles.actions}>
        {" "}
        {/* ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö style ‡∏ô‡∏µ‡πâ */}
        {/* --- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ --- */}
        <button
          onClick={() => handleAddToCart(course.id)}
          disabled={isAddingToCart}
          className={`${styles.cartButton} ${isAddingToCart ? "opacity-50 cursor-wait" : ""
            }`} // ‡πÄ‡∏û‡∏¥‡πà‡∏° Style ‡πÅ‡∏•‡∏∞ Disable ‡∏ï‡∏≠‡∏ô Loading
          title="‡∏´‡∏¢‡∏¥‡∏ö‡πÉ‡∏™‡πà‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"
        >
          <span className={styles.cartIcon}>üõí</span>{" "}
          {/* ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÉ‡∏ä‡πâ styles.cartIcon ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ */}
          {isAddingToCart ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°..." : ""}{" "}
          {/* ‡πÅ‡∏™‡∏î‡∏á Text ‡∏ï‡∏≠‡∏ô Loading (Optional) */}
        </button>
        <Link
          href={`/course/${course.id}`} // <-- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ Detail ‡∏û‡∏£‡πâ‡∏≠‡∏° ID
          className={styles.detailBtn} // <-- ‡πÉ‡∏ä‡πâ Style ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°
        >
          ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        </Link>{" "}
        {/* ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö style ‡∏ô‡∏µ‡πâ */}
      </div>
    </div>
  );
}

// --- Filter Options (Hardcoded - ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å API ‡∏´‡∏£‡∏∑‡∏≠ DB ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï) ---
const levels = ["‡∏°.1", "‡∏°.2", "‡∏°.3", "‡∏°.4", "‡∏°.5", "‡∏°.6"];
// **‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:** ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô types ‡∏ô‡∏µ‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡πÉ‡∏ô field `category` ‡∏Ç‡∏≠‡∏á Course ‡πÉ‡∏ô DB
const types = ["‡∏Å‡∏•‡∏≤‡∏á‡∏†‡∏≤‡∏Ñ", "‡∏õ‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏Ñ", "‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô", "‡∏ï‡∏∞‡∏•‡∏∏‡∏¢‡πÇ‡∏à‡∏ó‡∏¢‡πå", "‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"];

export default function CoursePage() {
  // --- State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Filter ---
  const [selectedLevels, setSelectedLevels] = useState<string[]>([]);
  const [selectedTypes, setSelectedTypes] = useState<string[]>([]);

  // --- State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Course ‡∏à‡∏≤‡∏Å API ---
  const [allDbCourses, setAllDbCourses] = useState<CourseFromAPI[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState("");

  // --- Fetch ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Course ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ---
  useEffect(() => {
    const fetchAllCourses = async () => {
      setIsLoading(true);
      setError(null);
      try {
        const res = await fetch("/api/courses"); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å GET /api/courses
        if (!res.ok) {
          throw new Error(`Failed to fetch courses (status: ${res.status})`);
        }
        const data: CourseFromAPI[] = await res.json();
        setAllDbCourses(data); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ô State
      } catch (err) {
        console.error("Error fetching courses:", err);
        setError(
          err instanceof Error ? err.message : "An unknown error occurred"
        );
      } finally {
        setIsLoading(false);
      }
    };
    fetchAllCourses();
  }, []); // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î Component

  // --- Filter Handlers (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
  const handleLevelChange = (level: string) => {
    setSelectedLevels((prev) =>
      prev.includes(level) ? prev.filter((l) => l !== level) : [...prev, level]
    );
  };

  const handleTypeChange = (type: string) => {
    setSelectedTypes((prev) =>
      prev.includes(type) ? prev.filter((t) => t !== type) : [...prev, type]
    );
  };

  // --- ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å State ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å DB ---
  // ‡πÉ‡∏ä‡πâ useMemo ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà allDbCourses ‡∏´‡∏£‡∏∑‡∏≠ filter ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  const filteredCourses = useMemo(() => {
    return allDbCourses.filter((course) => {
      const levelMatch =
        selectedLevels.length === 0 || (course.level && selectedLevels.includes(course.level));
      const typeMatch =
        selectedTypes.length === 0 || (course.category && selectedTypes.includes(course.category));
      const searchMatch =
        searchQuery === "" || course.courseName.toLowerCase().includes(searchQuery.toLowerCase());
      return levelMatch && typeMatch && searchMatch;
    });
  }, [allDbCourses, selectedLevels, selectedTypes, searchQuery]);



  return (
    // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ Layout ‡∏´‡∏•‡∏±‡∏Å‡∏Ñ‡∏£‡∏≠‡∏ö (‡πÄ‡∏ä‡πà‡∏ô Navbar, Footer)
    <main className={styles.pageWrapper}>
      {" "}
      {/* ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö style ‡∏ô‡∏µ‡πâ */}
      {/* Sidebar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Filter */}
      <aside className={styles.sidebar}>
        {" "}
        <div className={styles.searchWrapper}>
          <input
            type="text"
            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className={styles.searchInput}
          />
        </div>
        <div className={styles.group}>
          <div className={styles.category}>
            <h3 className={styles.sidebarTitle}>‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô</h3>
            {levels.map((level) => (
              <label key={level} className={styles.checkboxLabel}>
                <input
                  type="checkbox"
                  checked={selectedLevels.includes(level)}
                  onChange={() => handleLevelChange(level)}
                />
                {level}
              </label>
            ))}
          </div>
          <div className={styles.category}>
            <h3 className={styles.sidebarTitle}>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≠‡∏£‡πå‡∏™</h3>
            {types.map((type) => (
              <label key={type} className={styles.checkboxLabel}>
                <input
                  type="checkbox"
                  checked={selectedTypes.includes(type)}
                  onChange={() => handleTypeChange(type)}
                />
                {type}
              </label>
            ))}
          </div>
        </div>
      </aside>
      {/* Main Content ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà Filter ‡πÅ‡∏•‡πâ‡∏ß */}
      <section className={styles.mainContent}>
        {" "}
        {/* ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö style ‡∏ô‡∏µ‡πâ */}
        <h2 className={styles.pageTitle}>‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</h2>{" "}
        {/* ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö style ‡∏ô‡∏µ‡πâ */}
        {isLoading && <p className="text-center py-5">Loading courses...</p>}
        {error && (
          <p className="text-center py-5 text-red-600">Error: {error}</p>
        )}
        {!isLoading && !error && (
          <div className={styles.courseList}>
            {" "}
            {/* ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö style ‡∏ô‡∏µ‡πâ */}
            {filteredCourses.length > 0 ? (
              // ‡πÉ‡∏ä‡πâ filteredCourses ‡πÅ‡∏•‡∏∞ key={course.id} (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)
              filteredCourses.map((course) => (
                <CourseCard key={course.id} course={course} /> // <<-- ‡πÉ‡∏ä‡πâ ID ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å DB
              ))
            ) : (
              <p className="col-span-full text-center text-gray-500 py-10">
                ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
              </p> // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠
            )}
          </div>
        )}
      </section>
    </main>
  );
}
